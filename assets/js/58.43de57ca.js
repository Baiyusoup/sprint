(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{576:function(e,t,r){"use strict";r.r(t);var a=r(6),l=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"mvc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),r("p",[e._v("经典MVC模式中，M是指Model业务模型，V是指View用户界面，C则是Controller控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。")]),e._v(" "),r("h2",{attrs:{id:"mvvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[e._v("#")]),e._v(" MVVM")]),e._v(" "),r("p",[e._v("MVVM是Model-View-ViewModel 缩写，也就是把MVC中的Controller变成ViewModel。Model\n层代表数据模型，View代表UI组件，ViewModel是View层和Model层的桥梁，数据会绑定到viewModel层\n并⾃动将数据渲染到⻚⾯中，视图变化的时候会通知viewModel层更新数据。")]),e._v(" "),r("h2",{attrs:{id:"区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[e._v("#")]),e._v(" 区别")]),e._v(" "),r("p",[e._v("MVVM比MVC要精简一些，简化了业务和界面之间的依赖，它们之间的耦合度低，代码可重用性高。")]),e._v(" "),r("p",[e._v("Vue不是严格符合MVVM，因为MVVM规定Model和View不能直接通信，而Vue可以做到这点。")])])}),[],!1,null,null,null);t.default=l.exports}}]);