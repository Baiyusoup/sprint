(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{585:function(t,a,e){"use strict";e.r(a);var r=e(6),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"组件生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件生命周期"}},[t._v("#")]),t._v(" 组件生命周期")]),t._v(" "),e("p",[t._v("vue2的生命周期分为8个阶段")]),t._v(" "),e("h4",{attrs:{id:"_1-beforecreate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-beforecreate"}},[t._v("#")]),t._v(" 1. beforeCreate")]),t._v(" "),e("p",[t._v("执行的时候，组件实例刚创建，通常用于插件开发中执行一些初始化任务。")]),t._v(" "),e("h4",{attrs:{id:"_2-created"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-created"}},[t._v("#")]),t._v(" 2. created")]),t._v(" "),e("p",[t._v("组件初始化完毕后调用，各种数据可以使用，通常用于异步数据的获取")]),t._v(" "),e("h4",{attrs:{id:"_3-beforemount"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-beforemount"}},[t._v("#")]),t._v(" 3. beforeMount")]),t._v(" "),e("p",[t._v("在组件实例挂载之前调用，这时候未执行渲染更新，dom也没创建")]),t._v(" "),e("h4",{attrs:{id:"_4-mounted"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-mounted"}},[t._v("#")]),t._v(" 4. mounted")]),t._v(" "),e("p",[t._v("组件实例挂载完毕后调用，这时候组件的初始化结束，dom已经创建了，可以访问数据和dom元素")]),t._v(" "),e("h4",{attrs:{id:"_5-beforeupdate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-beforeupdate"}},[t._v("#")]),t._v(" 5. beforeUpdate")]),t._v(" "),e("p",[t._v("在数据更新时调用，可用于访问更新前的各种状态")]),t._v(" "),e("h4",{attrs:{id:"_6-updated"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-updated"}},[t._v("#")]),t._v(" 6. updated")]),t._v(" "),e("p",[t._v("页面更新完毕后调用，这时候所有状态都是最新")]),t._v(" "),e("h4",{attrs:{id:"_7-beforedestroy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-beforedestroy"}},[t._v("#")]),t._v(" 7. beforeDestroy")]),t._v(" "),e("p",[t._v("在组件销毁前调用，通常用于一些定时器或者订阅的取消")]),t._v(" "),e("h4",{attrs:{id:"_8-destroyed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-destroyed"}},[t._v("#")]),t._v(" 8. destroyed")]),t._v(" "),e("p",[t._v("组件销毁后调用")]),t._v(" "),e("h4",{attrs:{id:"_9-errorcaptured"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-errorcaptured"}},[t._v("#")]),t._v(" 9. errorCaptured")]),t._v(" "),e("p",[t._v("当捕获一个来自子孙组件的错误时被调用")]),t._v(" "),e("h2",{attrs:{id:"keep-alive组件的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive组件的生命周期"}},[t._v("#")]),t._v(" Keep-alive组件的生命周期")]),t._v(" "),e("h4",{attrs:{id:"_1-activated"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-activated"}},[t._v("#")]),t._v(" 1. activated")]),t._v(" "),e("p",[t._v("缓存组件激活时调用")]),t._v(" "),e("h4",{attrs:{id:"_2-deactivated"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-deactivated"}},[t._v("#")]),t._v(" 2. deactivated")]),t._v(" "),e("p",[t._v("缓存组件停用时被调用")]),t._v(" "),e("h2",{attrs:{id:"组件生命周期调用顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件生命周期调用顺序"}},[t._v("#")]),t._v(" 组件生命周期调用顺序")]),t._v(" "),e("ol",[e("li",[t._v("渲染顺序：先父后子，完成顺序：先子后父")]),t._v(" "),e("li",[t._v("更新顺序：父更新导致子更新，子更新完成后父")]),t._v(" "),e("li",[t._v("销毁顺序：先父后子，完成顺序：先子后父")])])])}),[],!1,null,null,null);a.default=_.exports}}]);