(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{572:function(v,_,s){"use strict";s.r(_);var t=s(6),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),s("p",[v._v("模块是将一个复杂的程序依据一定的规范封装成几个文件，并进行组合在一起。文件内部的数据与实现是私有的，只是向外部暴露一些接口与外部其他模块通信。")]),v._v(" "),s("h2",{attrs:{id:"好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#好处"}},[v._v("#")]),v._v(" 好处")]),v._v(" "),s("ol",[s("li",[v._v("代码抽象")]),v._v(" "),s("li",[v._v("代码封装")]),v._v(" "),s("li",[v._v("代码复用")]),v._v(" "),s("li",[v._v("依赖管理")])]),v._v(" "),s("h2",{attrs:{id:"commonjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[v._v("#")]),v._v(" CommonJs")]),v._v(" "),s("p",[v._v("commonjs模块规范是用于服务端，使用require指定依赖，exports对象定义自己的公共api。它的特点是")]),v._v(" "),s("ol",[s("li",[v._v("所有代码都运在模块作用域中，不会污染全局作用域")]),v._v(" "),s("li",[v._v("模块是同步加载的")]),v._v(" "),s("li",[v._v("模块在首次执行后就会缓存，再次记载只返回缓存的结果")]),v._v(" "),s("li",[v._v("模块输出的是一个值的拷贝，模块内部的变化不会影响到这个已经输出的值")])]),v._v(" "),s("h2",{attrs:{id:"amd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amd"}},[v._v("#")]),v._v(" AMD")]),v._v(" "),s("p",[v._v("AMD模块规范是异步加载模块，以浏览器作为目标执行环境，所有依赖模块的语句都定义在一个回调函数中，等所有模块都加载完了，这个回调函数才会执行。")]),v._v(" "),s("h2",{attrs:{id:"esm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#esm"}},[v._v("#")]),v._v(" ESM")]),v._v(" "),s("p",[v._v("ES6模块的设计思想是尽量的静态化，使得在编译阶段就能够确认模块的依赖关系，以及输入和输出的变量。")]),v._v(" "),s("p",[v._v("ES6模块的独特之处在于既可以通过浏览器原生加载，也可以与第三方加载器和构建工具一起加载。完全支持ES6模块的浏览器可以从顶级模块加载整个依赖图，而且是异步完成的。浏览器会解析入口模块，确定依赖，并发送对依赖模块的请求。这些文件通过网络请求返回后，浏览器就会解析它们的内容，确定它们的依赖，如果这些二级依赖还没加载，则会发送更多的请求。这个异步递归加载过程会持续到整个应用程序的依赖图完成。解析完依赖图后，应用程序就可以正式加载这些模块。")]),v._v(" "),s("p",[v._v("ES6模块是按需加载的，而且后续模块的请求会因为每个依赖模块的网络延迟而同步延迟。")]),v._v(" "),s("p",[v._v("ES6模块的部分特点")]),v._v(" "),s("ol",[s("li",[v._v("模块中可以导入导出各种类型的变量")]),v._v(" "),s("li",[v._v("模块是单例的，而且是加载一次")]),v._v(" "),s("li",[v._v("模块默认是严格模式")]),v._v(" "),s("li",[v._v("模块可以请求加载其他模块")])]),v._v(" "),s("h2",{attrs:{id:"esm和commonjs的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#esm和commonjs的区别"}},[v._v("#")]),v._v(" ESM和Commonjs的区别")]),v._v(" "),s("ol",[s("li",[v._v("CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。")]),v._v(" "),s("li",[v._v("CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")]),v._v(" "),s("li",[v._v("CommonJs 是单个值导出，ES6 Module可以导出多个")]),v._v(" "),s("li",[v._v("CommonJs 是动态语法可以写在判断里，ES6 Module 静态语法只能写在顶层")]),v._v(" "),s("li",[v._v("CommonJs 的 this 是当前模块，ES6 Module的 this 是 undefined（严格模式）")])])])}),[],!1,null,null,null);_.default=a.exports}}]);