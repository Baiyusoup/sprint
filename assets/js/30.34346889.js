(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{549:function(t,a,s){"use strict";s.r(a);var h=s(6),r=Object(h.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"hash路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash路由"}},[t._v("#")]),t._v(" Hash路由")]),t._v(" "),s("p",[t._v("这种路由模式是由window.location.hash和hashchange事件一起实现的，通过hashchange事件我们可以监听浏览器地址hash值的变化，根据hash值来显示相对应的页面内容。")]),t._v(" "),s("p",[t._v("hash路由的特点")]),t._v(" "),s("ol",[s("li",[t._v("改变hash值，是不会发送请求到服务端的，因此不会重新加载页面")]),t._v(" "),s("li",[t._v("location.hash的变化会直接反应到浏览器的地址栏")])]),t._v(" "),s("h2",{attrs:{id:"history路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history路由"}},[t._v("#")]),t._v(" History路由")]),t._v(" "),s("p",[t._v("这种路由是通过监听popstate事件和History对象来实现的，History是HTML5提供的操作浏览器的历史记录的接口，它保存了当前窗口访问过的所有页面网址。")]),t._v(" "),s("h3",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),s("ul",[s("li",[t._v("back() 在浏览器历史记录里前往上一页，相当于浏览器右上角的那个返回按钮，等价history.go(-1)")]),t._v(" "),s("li",[t._v("forward() 在浏览器历史记录里前往下一页，相当于浏览器右上角的那个前进按钮，等价history.go(1)")]),t._v(" "),s("li",[t._v("go() 接受一个整数作为参数，以当前页面为基准，跳转到指定历史记录。如果参数超过界限的话，那这个方法是无效的，默认参数是0，相当于刷新当前页面。")]),t._v(" "),s("li",[t._v("pushState() 用于在history中添加一条记录，这个方法不会触发popstate事件，这个方法不会导致浏览器加载页面，只是改变浏览器地址。")]),t._v(" "),s("li",[t._v("replaceState() 是修改当前历史记录项而不是新建一个，这个方法也不会触发popstate事件，也不会让浏览器加载也页面，也只是改变浏览器地址栏。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);