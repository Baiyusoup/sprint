(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{571:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并"}},[t._v("#")]),t._v(" 合并")]),t._v(" "),a("p",[t._v("git的合并命令主要是merge和rebase，有时候还会用来stash。")]),t._v(" "),a("h3",{attrs:{id:"merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" merge")]),t._v(" "),a("p",[a("code",[t._v("git merge xxx")]),t._v("的作用是将指定分支合并到当前分支。这个命令在一些场景下有些差异。")]),t._v(" "),a("p",[t._v("假设现在从master分支上，创建一个f1分支，而且在f1分支上有了新了提交（commit）。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("场景1")])])]),t._v(" "),a("p",[t._v("切回master分支，此时该分支为最新的代码，没有新的commit。那么当我们执行"),a("code",[t._v("git merge f1")]),t._v("时，master分支的HEAD指针会移动到"),a("code",[t._v("f1")]),t._v("分支最新的那个commit上来完成合并。这种合并就叫做"),a("code",[t._v("fast-forward")]),t._v("（快进方式）。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("场景2")])])]),t._v(" "),a("p",[t._v("切回master分支，做了一些改动，并有了一些commit。那么当我们执行"),a("code",[t._v("git merge f1")]),t._v("时，git会在当前分支上创建一个"),a("code",[t._v("merge commit")]),t._v("，然后将当前分支的HEAD指针移动到这个commit上，完成合并。")]),t._v(" "),a("p",[t._v("虽然说这两种场景的作用都是合并了代码，但是在git的提交历史上，场景2会比场景1多了给commit。有什么好处呢？一般来说master分支一般放的稳定的代码，需要的清爽的提交历史，让人一目了然，但是如果发生场景1，那么像"),a("code",[t._v("f1")]),t._v("这些开发新功能的分支就会混入master分支的提交历史，而且当需要版本回退的时候，就有可能退到那些开发分支的commit上，而不是我们想要的master分支上那些稳定版本的commit。而场景2的情况就比较好了，不会污染主分支的提交历史。")]),t._v(" "),a("p",[t._v("那有什么方法在场景1下，也能像场景2那样呢？在"),a("code",[t._v("git merge f1")]),t._v("后面加上"),a("code",[t._v("--no-ff")]),t._v("，这个参数的目的是禁止快进式合并。")]),t._v(" "),a("h3",{attrs:{id:"rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[t._v("#")]),t._v(" rebase")]),t._v(" "),a("p",[t._v("从master分支创建一个feat分支，然后在这个feat分支上进行了一些commit。切回master分支，然后在进行了一些commit，然后再切换feat分支，执行"),a("code",[t._v("git rebase master")]),t._v("，然后master新提交的那几个commit就会合并进行feat分支，然后feat分支的历史记录就像是从master分支的最新的commit那创建来的。")]),t._v(" "),a("h3",{attrs:{id:"stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stash"}},[t._v("#")]),t._v(" stash")]),t._v(" "),a("p",[t._v("这个命令的使用场景是当你在某个分支上已经开发了一段时间，但是发生了一些事情，需要你切换到另一个分支或者拉远程仓库上一些代码下来做点事。这时候可以使用"),a("code",[t._v("git stash")]),t._v("将暂存区和工作区的代码进行保存，当到一个栈里。后续可以从栈中取出那些还没开发完成的代码。")]),t._v(" "),a("h2",{attrs:{id:"版本回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("h3",{attrs:{id:"checkout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checkout"}},[t._v("#")]),t._v(" checkout")]),t._v(" "),a("p",[t._v("代码回滚")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- a.txt   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 丢弃某个文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 丢弃全部")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[t._v("#")]),t._v(" reset")]),t._v(" "),a("p",[t._v("git reset用于回退版本，可以丢弃不再使用的提交。")]),t._v(" "),a("p",[a("code",[t._v("--mixed")]),t._v(" 默认值，只有暂存区发生变化，即只重置暂存区。")]),t._v(" "),a("p",[a("code",[t._v("--hard")]),t._v(" 重置暂存区和工作区，回到上一次commit")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将暂存区的文件回退到工作区，默认使用--mixed")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将某文件从暂存区中退回到工作区")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当前分支的HEAD指针移动到指定commit，同时将指定的commit之后的那些本地库文件和暂存区文件都退回到工作区。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将HEAD指针指向指定commit，同时将指定的commit之后的本地库文件回退到暂存区中")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将HEAD指针指向指定commit，同时清空暂存区。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --keep "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将HEAD指针指向指定commit，但是暂存区和工作区不变")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("h3",{attrs:{id:"revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#revert"}},[t._v("#")]),t._v(" revert")]),t._v(" "),a("p",[t._v("git revert 在当前的HEAD上，新增一次commit，将HEAD指向这个新的commit，用这个commit抵消掉上一次提交导致的所有变化。这个操作不会改变过去的提交历史，主要用于安全的取消过去发布的提交。")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过提交一个新的commit来撤销指定commit")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);