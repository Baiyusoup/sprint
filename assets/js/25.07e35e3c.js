(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{544:function(t,a,e){"use strict";e.r(a);var s=e(6),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"常用属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用属性"}},[t._v("#")]),t._v(" 常用属性")]),t._v(" "),e("ul",[e("li",[t._v("async 表示应该立即开始下载脚本，且这个脚本不会阻止其他页面动作。只对外部脚本有效。保证在load事件前执行，但可能在DOMContentLoaded之前或之后。")]),t._v(" "),e("li",[t._v("defer 表示文件解析和显示完成后再执行这个脚本是没有问题的。外部脚本有效")]),t._v(" "),e("li",[t._v("type")])]),t._v(" "),e("h2",{attrs:{id:"src属性值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#src属性值"}},[t._v("#")]),t._v(" src属性值")]),t._v(" "),e("p",[t._v("浏览器在解析这个脚本时，会向src属性执行的路径发送一个GET请求，且不受同源策略限制。")]),t._v(" "),e("h2",{attrs:{id:"async"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async"}},[t._v("#")]),t._v(" async")]),t._v(" "),e("p",[t._v("对于普通脚本，使用async后，脚本会被并行请求，在加载就绪后运行。对于模块脚本，那么脚本和它所有的依赖都会在延缓队列中执行，也是被并行请求，以及尽快解析和执行。")]),t._v(" "),e("h2",{attrs:{id:"defer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defer"}},[t._v("#")]),t._v(" defer")]),t._v(" "),e("p",[t._v("告诉浏览器不需要等待脚本，脚本会在后台进行下载，等浏览器解析完文档后才会执行（在DOMContentLoaded事件前执行）。")]),t._v(" "),e("p",[t._v("defer与async的区别是：defer要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；async一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，defer是“渲染完再执行”，async是“下载完就执行”。另外，如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的。")])])}),[],!1,null,null,null);a.default=r.exports}}]);