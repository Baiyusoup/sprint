(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{579:function(t,a,r){"use strict";r.r(a);var s=r(6),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),r("p",[t._v("vue是一个用于创建用户界面的渐进式js框架，同时也是用来创建单页面应用的web应用框架。")]),t._v(" "),r("h3",{attrs:{id:"核心特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心特点"}},[t._v("#")]),t._v(" 核心特点")]),t._v(" "),r("h4",{attrs:{id:"_1-数据驱动"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据驱动"}},[t._v("#")]),t._v(" 1.数据驱动")]),t._v(" "),r("p",[t._v("MVVM表示的是模型层-视图层-视图模型层。vue的负责的就是这个视图模型层，通过vue的数据驱动，我们只需要写数据处理逻辑，vue根据通过数据双向绑定帮我们把数据的变化反应到页面上")]),t._v(" "),r("h4",{attrs:{id:"_2-组件化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-组件化"}},[t._v("#")]),t._v(" 2. 组件化")]),t._v(" "),r("p",[t._v("这个组件化的概念就是把图形和非图形的各种逻辑都抽象成一个同一的组件来实现开发的模式。组件化的优点在于可以降低整个系统的耦合度、调式方便和提高可维护性。")]),t._v(" "),r("h4",{attrs:{id:"_3-指令系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-指令系统"}},[t._v("#")]),t._v(" 3. 指令系统")]),t._v(" "),r("h3",{attrs:{id:"和react的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#和react的区别"}},[t._v("#")]),t._v(" 和React的区别")]),t._v(" "),r("ol",[r("li",[t._v("数据流向不同")]),t._v(" "),r("li",[t._v("数据变化的实现原理不同")]),t._v(" "),r("li",[t._v("组件化通信的不同")]),t._v(" "),r("li",[t._v("diff算法不同")])])])}),[],!1,null,null,null);a.default=e.exports}}]);